name: Check, Lint, Test, Build, Release

on:
  pull_request:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check-prettier:
    name: Check Prettier
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Prettier formatting
        uses: actionsx/prettier@v2
        with:
          args: --check .

  check-rustfmt:
    name: Check Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # nightly is needed for formatting imports correctly
      - name: Install latest nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: x86_64-unknown-linux-gnu

      - name: Check Rust formatting
        # import formatting is nightly only
        run: cargo +nightly fmt --all -- --check

  check-clippy-nightly:
    name: Check Clippy (nightly)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: clippy

      - name: Check Clippy
        # We want to hunt for unqualified local imports, but that requires nightly.
        # Nightly introduces a bunch of new errors - we therefore run clippy in
        # two stages: one regular, and one on nightly with specifically only
        # checking for unqualified local imports.
        # prettier-ignore
        run: cargo +nightly clippy -- -A clippy::all -D unqualified_local_imports -Zcrate-attr="feature(unqualified_local_imports)"

  check-clippy:
    name: Check, Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # Must happen /after/ the checkout step, to pick up the toolchain
      # from the `rust-toolchain.toml` file.
      - name: Install toolchain
        run: |
          rustup install 
          rustup component add clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: x86_64-unknown-linux-gnu

      - name: Cargo check
        run: cargo check --all-targets

      - name: Clippy
        run: |
          cargo clippy --all-targets

  integration-test:
    name: Integration test
    runs-on: ubuntu-latest
    needs: [check-clippy, check-clippy-nightly]
    env:
      ELECTRS_VERSION: v3.2.0
    steps:
      - name: Download latest bitcoin-patched
        run: |
          pushd ..
          wget https://releases.drivechain.info/L1-bitcoin-patched-latest-x86_64-unknown-linux-gnu.zip
          unzip L1-bitcoin-patched-latest-x86_64-unknown-linux-gnu.zip
          rm L1-bitcoin-patched-latest-x86_64-unknown-linux-gnu.zip
          mv L1-bitcoin-patched-latest-x86_64-unknown-linux-gnu bitcoin-patched-bins
          chmod +x bitcoin-patched-bins/bitcoind
          chmod +x bitcoin-patched-bins/bitcoin-cli
          chmod +x bitcoin-patched-bins/bitcoin-util
          popd

      - name: Checkout bitcoin-patched for signet miner script
        run: |
          pushd ..
          git clone https://github.com/LayerTwo-Labs/bitcoin-patched.git
          popd

      - name: Cache electrs binary
        id: cache-electrs
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/electrs/target/release/electrs
          key: electrs-binary-${{ env.ELECTRS_VERSION }}

      - name: Install electrs
        if: steps.cache-electrs.outputs.cache-hit != 'true'
        run: |
          git clone --branch ${{ env.ELECTRS_VERSION }} --depth 1 https://github.com/mempool/electrs.git ${{ runner.temp }}/electrs
          cd ${{ runner.temp }}/electrs
          cargo build --locked --release

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # `rustup` is already installed on GitHub Actions runners, so
      # this reads the content from our `rust-toolchain.toml` file.
      # Must happen /after/ the checkout step.
      - name: Install Rust toolchain
        run: rustup install

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: x86_64-unknown-linux-gnu

      - name: Build (debug)
        run: cargo build

      - name: Run integration tests
        id: runIntegrationTests
        run: |
          export BIP300301_ENFORCER='target/debug/bip300301_enforcer'
          export BITCOIND='../bitcoin-patched-bins/bitcoind'
          export BITCOIN_CLI='../bitcoin-patched-bins/bitcoin-cli'
          export BITCOIN_UTIL='../bitcoin-patched-bins/bitcoin-util'
          export ELECTRS='${{ runner.temp }}/electrs/target/release/electrs'
          export SIGNET_MINER='../bitcoin-patched/contrib/signet/miner'
          cargo run --example integration_tests

  test-build-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: x86_64-unknown-linux-gnu
            binary-suffix: ""
            rustflags: ""

          - os: macos-latest-large
            name: x86_64-apple-darwin
            binary-suffix: ""
            rustflags: ""

          - os: ubuntu-latest
            name: x86_64-pc-windows-gnu
            binary-suffix: .exe
            rustflags: "-C linker=/usr/bin/x86_64-w64-mingw32-gcc"

    name: Test, Build, Release (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    needs: [check-clippy, check-clippy-nightly]
    permissions:
      contents: write
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # Must happen /after/ the checkout step, to pick up the toolchain
      - run: rustup target add ${{ matrix.name }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.name }}

      - name: Install windows-specific deps
        run: sudo apt install mingw-w64 nasm
        if: ${{ matrix.name == 'x86_64-pc-windows-gnu' }}

      - name: Test
        run: cargo test --tests

      - name: Build
        run: cargo build --release --target ${{ matrix.name }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

      - name: "Set environment variables: version number and output filenames"
        run: |
          # We still capture the version, but won't use it in the final binary name
          APP_VERSION=$(cargo metadata --format-version 1 | \
            jq -er '.packages | map(select(.name == "bip300301_enforcer") | .version) | .[0]')
          # Use 'latest' in the filename instead of the version
          APP_DIRNAME="bip300301-enforcer-latest-${{ matrix.name }}"
          APP_FILENAME="${APP_DIRNAME}${{ matrix.binary-suffix }}"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"
          echo "APP_FILENAME=$APP_FILENAME" >> "$GITHUB_ENV"
          echo "APP_DIRNAME=$APP_DIRNAME" >> "$GITHUB_ENV"

      - run: |
          mkdir release
          cp target/${{ matrix.name }}/release/bip300301_enforcer${{ matrix.binary-suffix }} release/${{ env.APP_FILENAME }}

      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_DIRNAME }}
          if-no-files-found: error
          path: |
            release/${{ env.APP_FILENAME }}

      - name: Release
        uses: softprops/action-gh-release@v2.0.2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release/${{ env.APP_FILENAME }}
          fail_on_unmatched_files: true

  upload-releases-to-releases-drivechain-info:
    name: Upload releases to releases.drivechain.info
    runs-on: ubuntu-latest
    needs: [integration-test, test-build-release]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create zip files for releases.drivechain.info
        run: |
          shopt -s extglob
          zip -r bip300301-enforcer-latest-x86_64-apple-darwin.zip bip300301-enforcer-latest-x86_64-apple-darwin
          zip -r bip300301-enforcer-latest-x86_64-pc-windows-gnu.zip bip300301-enforcer-latest-x86_64-pc-windows-gnu
          zip -r bip300301-enforcer-latest-x86_64-unknown-linux-gnu.zip bip300301-enforcer-latest-x86_64-unknown-linux-gnu

      - name: Upload release assets to releases.drivechain.info
        uses: appleboy/scp-action@v1
        with:
          host: 45.33.96.47
          username: root
          password: ${{ secrets.RELEASES_SERVER_PW }}
          port: 22
          source: 'bip300301-enforcer-latest-*.zip'
          target: '/var/www/html/'
