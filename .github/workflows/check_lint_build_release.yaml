name: Check, Lint, Test, Build, Release

on:
  pull_request:
  push:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check-lint:
    name: Check, Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: x86_64-unknown-linux-gnu

      - name: Check Prettier formatting
        uses: actionsx/prettier@v2
        with:
          args: --check .

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Cargo check
        run: cargo check

      - name: Clippy
        run: cargo clippy --all-targets --all-features

  integration-test:
    name: Integration test
    runs-on: ubuntu-latest
    needs: [check-lint]
    steps:
      - name: Install latest Bitcoin Core
        run: |
          pushd ..
          BITCOIN_CORE_URL='https://bitcoincore.org/bin/bitcoin-core-28.0/bitcoin-28.0-x86_64-linux-gnu.tar.gz'
          curl "${BITCOIN_CORE_URL}" | tar xz
          popd

      - name: Check that Bitcoin Core is installed
        run: |
          ls '../bitcoin-28.0'
          ls '../bitcoin-28.0/bin'

      - name: Checkout bitcoin-patched for signet miner script
        run: |
          pushd ..
          git clone https://github.com/LayerTwo-Labs/bitcoin-patched.git
          cd bitcoin-patched
          git checkout ash/signet-miner
          popd

      - name: Checkout electrs
        run: |
          pushd ..
          git clone https://github.com/romanz/electrs.git
          popd

      - name: Install latest stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          # Stable, as of January 2015. If updating, also update
          # the version in the Dockerfile.
          toolchain: "1.84"

      - name: Rust Cache (electrs)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-electrs"
          workspaces: ../electrs -> target

      - name: Install electrs
        run: |
          pushd ../electrs
          cargo build --locked --release
          popd

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: x86_64-unknown-linux-gnu

      - name: Build (debug)
        run: cargo build

      - name: Run integration tests
        id: runIntegrationTests
        run: |
          BIP300301_ENFORCER='target/debug/bip300301_enforcer'
          BITCOIND='../bitcoin-28.0/bin/bitcoind'
          BITCOIN_CLI='../bitcoin-28.0/bin/bitcoin-cli'
          BITCOIN_UTIL='../bitcoin-28.0/bin/bitcoin-util'
          ELECTRS='../electrs/target/release/electrs'
          SIGNET_MINER='../bitcoin-patched/contrib/signet/miner'
          cargo run --example integration_tests -- \
            --bip300301-enforcer "${BIP300301_ENFORCER}" \
            --bitcoind "${BITCOIND}" \
            --bitcoin-cli "${BITCOIN_CLI}" \
            --bitcoin-util "${BITCOIN_UTIL}" \
            --electrs "${ELECTRS}" \
            --signet-miner "${SIGNET_MINER}"

  test-build-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: x86_64-unknown-linux-gnu
            binary-suffix: ""
            rustflags: ""

          - os: macos-latest-large
            name: x86_64-apple-darwin
            binary-suffix: ""
            rustflags: ""

          - os: ubuntu-latest
            name: x86_64-pc-windows-gnu
            binary-suffix: .exe
            rustflags: "-C linker=/usr/bin/x86_64-w64-mingw32-gcc"

    name: Test, Build, Release (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    needs: [check-lint]
    permissions:
      contents: write
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install latest stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.name }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.name }}

      - name: Install windows-specific deps
        run: sudo apt install mingw-w64 nasm
        if: ${{ matrix.name == 'x86_64-pc-windows-gnu' }}

      - name: Test
        run: cargo test --tests --all-features

      - name: Build
        run: cargo build --release --target ${{ matrix.name }}
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

      - name: "Set environment variables: version number and output filenames"
        run: |
          APP_VERSION=$(cargo metadata --format-version 1 | \
            jq -er '.packages | map(select(.name == "bip300301_enforcer") | .version) | .[0]')
          APP_DIRNAME="bip300301_enforcer-${APP_VERSION}-${{ matrix.name }}"
          APP_FILENAME="${APP_DIRNAME}${{ matrix.binary-suffix }}"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_ENV"
          echo "APP_FILENAME=$APP_FILENAME" >> "$GITHUB_ENV"
          echo "APP_DIRNAME=$APP_DIRNAME" >> "$GITHUB_ENV"
      - run: |
          mkdir release
          cp target/${{ matrix.name }}/release/bip300301_enforcer${{ matrix.binary-suffix }} release/${{ env.APP_FILENAME }}

      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_DIRNAME }}
          if-no-files-found: error
          path: |
            release/${{ env.APP_FILENAME }}

      - name: Release
        uses: softprops/action-gh-release@v2.0.2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release/${{ env.APP_FILENAME }}
          fail_on_unmatched_files: true

  upload-releases-to-releases-drivechain-info:
    name: Upload releases to releases.drivechain.info
    runs-on: ubuntu-latest
    needs: [integration-test, test-build-release]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create zip files for releases.drivechain.info
        run: |
          shopt -s extglob
          mv bip300301_enforcer-+([0-9]).+([0-9]).+([0-9])-x86_64-apple-darwin bip300301-enforcer-latest-x86_64-apple-darwin
          zip -r bip300301-enforcer-latest-x86_64-apple-darwin.zip \
            bip300301-enforcer-latest-x86_64-apple-darwin
          mv bip300301_enforcer-+([0-9]).+([0-9]).+([0-9])-x86_64-pc-windows-gnu bip300301-enforcer-latest-x86_64-pc-windows-gnu
          zip -r bip300301-enforcer-latest-x86_64-pc-windows-gnu.zip \
            bip300301-enforcer-latest-x86_64-pc-windows-gnu
          mv bip300301_enforcer-+([0-9]).+([0-9]).+([0-9])-x86_64-unknown-linux-gnu bip300301-enforcer-latest-x86_64-unknown-linux-gnu
          zip -r bip300301-enforcer-latest-x86_64-unknown-linux-gnu.zip \
            bip300301-enforcer-latest-x86_64-unknown-linux-gnu \

      - name: Upload release assets to releases.drivechain.info
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: 45.33.96.47
          user: root
          pass: ${{ secrets.RELEASES_SERVER_PW }}
          port: 22
          scp: |
            'bip300301-enforcer-latest-*.zip' => '/var/www/html/'
