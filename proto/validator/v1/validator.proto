syntax = "proto3";
package validator.v1;

service ValidatorService {
  rpc ConnectBlock(ConnectBlockRequest) returns (ConnectBlockResponse);
  rpc DisconnectBlock(DisconnectBlockRequest) returns (DisconnectBlockResponse);
  rpc GetCoinbasePSBT(GetCoinbasePSBTRequest) returns (GetCoinbasePSBTResponse);
  rpc GetDeposits(GetDepositsRequest) returns (GetDepositsResponse);

  rpc GetSidechainProposals(GetSidechainProposalsRequest)
      returns (GetSidechainProposalsResponse);

  rpc GetSidechains(GetSidechainsRequest) returns (GetSidechainsResponse);

  rpc GetCtip(GetCtipRequest) returns (GetCtipResponse);

  rpc GetMainBlockHeight(GetMainBlockHeightRequest)
      returns (GetMainBlockHeightResponse);

  rpc GetMainChainTip(GetMainChainTipRequest) returns (GetMainChainTipResponse);

  /*
    rpc ListSidechainProposals(ListSidechainProposalsRequest) returns
    (ListSidechainProposalsResponse); rpc
    ListActiveSidechains(ListActiveSidechainsRequest) returns
    (ListActiveSidechainsResponse);

    rpc ListProposedWithdrawalBundleIds(ListProposedWithdrawalBundleIdsRequest)
    returns (ListProposedWithdrawalBundleIdsResponse); rpc
    ListFailedWithdrawalBundleIds(ListFailedWithdrawalBundleIdsRequest) returns
    (ListFailedWithdrawalBundleIdsResponse); rpc
    ListSuccededWithdrawalBundleIds(ListSuccededWithdrawalBundleIdsRequest)
    returns (ListSuccededWithdrawalBundleIdsResponse);

    rpc GetWithdrawalBundle(GetWithdrawalBundleRequest) returns
    (GetWithdrawalBundleResponse);

    rpc ListDeposits(ListDepositsRequest) returns (ListDepositsResponse);

    rpc IsBlockValid(IsBlockValidRequest) returns (IsBlockValidResponse);
    rpc IsTransactionValid(IsTransactionValidRequest) returns
    (IsTransactionValidResponse);
  */
}

message GetSidechainProposalsRequest {
}
message GetSidechainProposalsResponse {
  repeated SidechainProposal sidechain_proposals = 1;
}

message SidechainProposal {
  uint32 sidechain_number = 1;
  bytes data = 2;
  bytes data_hash = 3;
  uint32 vote_count = 4;
  uint32 proposal_height = 5;
  uint32 proposal_age = 6;
}

message GetSidechainsRequest {
}
message GetSidechainsResponse {
  repeated Sidechain sidechains = 1;
}

message Sidechain {
  uint32 sidechain_number = 1;
  bytes data = 2;
  uint32 vote_count = 3;
  uint32 proposal_height = 4;
  uint32 activation_height = 5;
}

message ConnectBlockRequest {
  uint32 height = 1;
  bytes block = 2;
}
message ConnectBlockResponse {
}

message DisconnectBlockRequest {
  bytes block = 1;
}
message DisconnectBlockResponse {
}

message GetCoinbasePSBTRequest {
  repeated ProposeSidechain propose_sidechains = 1;
  repeated AckSidechain ack_sidechains = 2;
  repeated ProposeBundle propose_bundles = 3;
  AckBundles ack_bundles = 4;
};
message GetCoinbasePSBTResponse {
  bytes psbt = 1;
};

enum AckBundlesTag {
  ACK_BUNDLES_TAG_UNSPECIFIED = 0;
  ACK_BUNDLES_TAG_REPEAT_PREVIOUS = 1;
  ACK_BUNDLES_TAG_LEADING_BY_50 = 2;
  ACK_BUNDLES_TAG_UPVOTES = 3;
}

message AckBundles {
  AckBundlesTag tag = 1;
  repeated uint32 upvotes = 2;
}

message AckSidechain {
  uint32 sidechain_number = 1;
  bytes data_hash = 2;
}

message ProposeSidechain {
  uint32 sidechain_number = 1;
  bytes data = 2;
}

message ProposeBundle {
  uint32 sidechain_number = 1;
  bytes bundle_txid = 2;
}

message GetDepositsRequest {
  uint32 sidechain_number = 1;
}

message GetDepositsResponse {
  repeated Deposit deposits = 1;
}

message Deposit {
  bytes address = 1;
  uint64 value = 2;
  uint64 sequence_number = 3;
}

message GetCtipRequest {
  uint32 sidechain_number = 1;
}

message GetCtipResponse {
  optional Ctip ctip = 1;
}

message Ctip {
  bytes txid = 1;
  uint32 vout = 2;
  uint64 value = 3;
  uint64 sequence_number = 4;
}

message GetMainBlockHeightRequest {
}

message GetMainBlockHeightResponse {
  uint32 height = 1;
}

message GetMainChainTipRequest {
}

message GetMainChainTipResponse {
  bytes block_hash = 1;
}
